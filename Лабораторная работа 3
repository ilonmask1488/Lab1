#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <locale.h> 
#include <string>
#include <cmath>
#include <sstream>
#include <cstdlib>

using namespace std;

class Wheel {
public:
	double mileage_wheel;
	int status;
	Wheel() { status = 0; mileage_wheel = 0; };
	double get_mileage_wheel() {
		return mileage_wheel;
	}
	void check_status(double mileage_wheel) {
		if (status != 1) {
			double k = rand() % 50 + (mileage_wheel / 100);
			if (k > 45) {
				status = 1;
			}
		}
	}
};

class Engine {
protected:
	double engine_consumption;
	double power;
public:
	double calculating_consumption(double power)
	{
		return fabs(pow(power, 1 / 3) + sqrt(power) - 6.25);
	}
};
class Fuel_system {
protected:
	double Volume_tank;
	double Current_volume;
public:
	void calc_current_volume(double Volume_tank, double lenght_of_the_track, int num_ref, double engine_consumption)
	{
		Current_volume = Volume_tank + num_ref * Volume_tank - lenght_of_the_track / 100 * engine_consumption;
	}
};

void ignoreLine()
{
	cin.clear();
	cin.ignore();
}

class TransportVehicle: public Engine, public Fuel_system {
	string Title;
	int amount_wheels;
	double mileage;
	double Speed;
	int num_refuelings;
	double time_of_the_race;
public:
	int Brokewheels = 0;
	Wheel* wheels;
	TransportVehicle() {};
	TransportVehicle(string Transport_name, int Wheels_1) {
		set_name(Transport_name);
		set_amount_wheels(Wheels_1);
		wheels = new Wheel[Wheels_1];
		for (int i = 0; i < Wheels_1; i++) {
			wheels[i] = Wheel();
		}

		cout << "Введите мощность: " << endl;
		cin >> power;
		while (cin.fail()) {
			ignoreLine();
			cout << "Вы ввели символ, пожалуйста, введите число" << endl;
			cin >> power;
		}
		do
		{
			if (power <= 0)
			{
				cout << "Ошибка! Повторите попытку (мощность > 0)" << endl;
				cin >> power;
			}
		} while (power <= 0);

		mileage = 0;

		cout << "Введите объем резервуара: " << endl;
		cin >> Volume_tank;
		while (cin.fail()) {
			ignoreLine();
			cout << "Вы ввели символ, пожалуйста, введите число" << endl;
			cin >> Volume_tank;
		}
		do
		{
			if (Volume_tank <= 0)
			{
				cout << "Ошибка! Повторите попытку (объём бака>0)" << endl;
				cin >> Volume_tank;
			}
		} while (Volume_tank <= 0);

		Current_volume = Volume_tank;
		engine_consumption = calculating_consumption(power);
		determination_speed();
	}
	void determination_speed() {
		Speed = abs((sqrt(power) * ((70 / (amount_wheels)) - 2.5)) / pow(2, Brokewheels));
	}
	void set_name(string Title) { this->Title = Title; }
	string get_name() { return Title; }
	double get_speed() { return Speed; }
	double get_eng_consumption() { return engine_consumption; }
	void set_amount_wheels(int amount_wheels) { this->amount_wheels = amount_wheels; }
	int get_amount_wheels() { return amount_wheels; }
	double get_vol_tank() { return Volume_tank; }
	void Set_mileage(double mileage) { this->mileage = mileage; }
	void Set_num_refuelings(int num_refuelings) { this->num_refuelings = num_refuelings; }
	int Get_num_refuelings() { return num_refuelings; }
	void Set_Time_race(double time_of_the_race) { this->time_of_the_race = time_of_the_race; }
	double Get_Time_race() { return time_of_the_race; }\
	int count_refueling(double lenght_of_the_track, int amount_vehicles, TransportVehicle* vehicles, int i, double power) {
		int num_refuelings;
		num_refuelings = (int)(((lenght_of_the_track / 100) * vehicles[i].get_eng_consumption()) / vehicles[i].Volume_tank);
        return num_refuelings;
    }

	void after_track(double mileage) {
		for (int i = 0; i < amount_wheels; i++) {
			wheels[i].check_status(mileage);
		}
	}

	friend ostream& operator<<(std::ostream& os, const TransportVehicle& vehicle) {
		os << "Vehicle: " << vehicle.Title << "\n";
		os << "Number of wheels: " << vehicle.amount_wheels << "\n";
		os << "Mileage: " << vehicle.wheels->get_mileage_wheel() << "\n";
		os << "Wheel status:\n";
		for (int i = 0; i < vehicle.amount_wheels; i++) {
			os << "Wheel " << i + 1 << ": ";
			if (vehicle.wheels[i].status == 1) {
				os << "Broken\n";
			}
			else if (vehicle.wheels[i].status == 0) {
				os << "Good condition\n";
			}
			else {
			}
		}
		os << "Volume tank: " << vehicle.Volume_tank << "\n";
		os << "Current volume: " << vehicle.Current_volume << "\n";
		os << "Engine consumption: " << vehicle.engine_consumption << "\n";
		os << "Speed: " << vehicle.Speed << "\n\n";
		return os;
	}

	friend void Determination_track(double lenght_of_the_track, TransportVehicle* vehicles, int amount_vehicles, double power)
	{
		string* name_v = new string[amount_vehicles];
		for (int i = 0; i < amount_vehicles; i++) {
			int num_refuelings;
			double time_of_the_race;
			num_refuelings = (int)(((lenght_of_the_track / 100) * vehicles[i].get_eng_consumption()) / vehicles[i].Volume_tank);
			vehicles[i].Set_num_refuelings(num_refuelings);
			time_of_the_race = lenght_of_the_track / vehicles[i].get_speed();
			vehicles[i].Set_Time_race(time_of_the_race);
		}
		for (int i = 0; i < amount_vehicles; ++i)
		{
			name_v[i] = vehicles[i].get_name();
		}
		for (int i = 0; i < amount_vehicles - 1; ++i)
		{
			if (vehicles[i].Get_Time_race() > vehicles[i + 1].Get_Time_race())
			{
				double temp = vehicles[i].Get_Time_race();
				vehicles[i].Set_Time_race(vehicles[i + 1].Get_Time_race());
				vehicles[i + 1].Set_Time_race(temp);

				int temp_refuelings = vehicles[i].Get_num_refuelings();
				vehicles[i].Set_num_refuelings(vehicles[i + 1].Get_num_refuelings());
				vehicles[i + 1].Set_num_refuelings(temp_refuelings);

				string temp_name = name_v[i];
				name_v[i] = name_v[i + 1];
				name_v[i + 1] = temp_name;
			}
			else if (vehicles[i].Get_Time_race() == vehicles[i + 1].Get_Time_race())
			{
				if (vehicles[i].Get_num_refuelings() > vehicles[i + 1].Get_num_refuelings())
				{
					int temp_refuelings = vehicles[i].Get_num_refuelings();
					vehicles[i].Set_num_refuelings(vehicles[i + 1].Get_num_refuelings());
					vehicles[i + 1].Set_num_refuelings(temp_refuelings);

					string temp_name = name_v[i];
					name_v[i] = name_v[i + 1];
					name_v[i + 1] = temp_name;
				}
			}
		}
		for (int i = 0; i < amount_vehicles; i++)
		{
			vehicles[i].PrintRaceResults(amount_vehicles, name_v, vehicles);
		}
		delete[] name_v;
	}
	void PrintRaceResults(int amount_vehicles, string* name_v, TransportVehicle* vehicles) {
		cout << "Определение завершено!" << endl;
		for (int i = 0; i < amount_vehicles; i++) {
			cout << "Транспорт: " << name_v[i] << endl;

			int hours = (int)(vehicles[i].Get_Time_race());
			int minutes = (int)((vehicles[i].Get_Time_race() - hours) * 60);
			int seconds = (int)((vehicles[i].Get_Time_race() * 3600) - (hours * 3600) - (minutes * 60));

			cout << "Время в пути: " << hours << " часов " << minutes << " минут " << seconds << " секунд" << endl;

			cout << "Количество дозаправок: " << vehicles[i].Get_num_refuelings() << endl;
		}
	}
};

int Get_Variant() {
	int number;
	string userInput;
	getline(cin, userInput);
	stringstream ss(userInput);
	while (true) {
		cout << "Введите число: " << endl;
		getline(cin, userInput);
		stringstream ss(userInput);
		if (ss >> number && number > 0) {
			break;
		}
		else {
			cout << "Ошибка! Пожалуйста, введите допустимое значение." << endl;
		}
	}
	return number;
}

void Wheel_mileage(TransportVehicle* vehicles, int amount_vehicles, double length_of_the_track) {
	for (int i = 0; i < amount_vehicles; i++) {
		for (int j = 0; j < vehicles[i].get_amount_wheels(); j++) {
			vehicles[i].wheels[j].mileage_wheel += length_of_the_track;
		}
	}
}

void new_page()
{
	for (int i = 0; i < 100; ++i)
	{
		cout << "\n";
	}
}

//void output(int amount_vehicles, TransportVehicle* vehicles)
//{
//	for (int i = 0; i < amount_vehicles; i++)
//	{
//		cout << "Название: " << vehicles[i].Get_name() << endl;
//		cout << "Количество колёс: " << vehicles[i].Get_amount_wheels() << endl;
//		ShowSpeed(amount_vehicles, vehicles, i);
//		cout << "Объем резервуара: " << vehicles[i].Get_volume_tank() << endl;
//		Showfuelcons(amount_vehicles, vehicles, i);
//		cout << "Мощность: " << vehicles[i].Get_power() << endl;
//	}
//}

void menu(int amount_vehicles, TransportVehicle* vehicles, double lenght_of_the_track, string vehicle_name, int amount_wheels, double power)
{
	int choice;
	int exit_menu = 0;
	int determination_complete = 0;
	int car = 0;
	double mil = 0;

	while (exit_menu == 0)
	{
		cout << "Какое действие хотите совершить?" << endl;
		cout << "1. Внести данные о транспортном средстве" << endl;
		cout << "2. Посмотреть данные о транспортных средствах" << endl;
		cout << "3. Ввести протяженность трассы" << endl;
		cout << "4. Вывод результатов прохождения трассы" << endl; // должно появляться после расчетов
		cout << "5. Выход" << endl;
		cout << "> ";
		cin >> choice;
		while (cin.fail()) {
			ignoreLine();
			cout << "Вы ввели символ, пожалуйста, введите число" << endl;
			cin >> amount_vehicles;
		}
		switch (choice)
		{
		case 1:
			system("cls");
			new_page();
			for (int i = 0; i < amount_vehicles; ++i)
			{
				string vehicle_name;
				int wheels;
				cout << "Введите название вашей машины: " << endl;
				cin >> vehicle_name;
				cout << "Введите количество колёс: " << endl;
				cin >> wheels;
				while (cin.fail()) {
					ignoreLine();
					cout << "Вы ввели символ, пожалуйста, введите числ" << endl;
					cin >> wheels;
				}
				do
				{
					if (wheels <= 0)
					{
						cout << "Ошибка! Повторите попытку (количество колёс > 0)" << "\n";
						cin >> wheels;
					}
				} while (wheels <= 0);
				vehicles[i] = TransportVehicle(vehicle_name, wheels);
			}
			car++;
			break;
		case 2:
			system("cls");
			if (car == 0)
			{
				cout << "Во-первых, введите транспортное средство!" << endl;
				break;
			}
			for (int i = 0; i < amount_vehicles; ++i)
			{
				cout << vehicles[i];
			}
			break;
			break;
		case 3:
			system("cls");
			if (car == 0)
			{
				cout << "Во-первых, введите транспортное средство!" << endl;
				break;
			}
			cout << "Введите длину трассы: " << endl;
			lenght_of_the_track = Get_Variant();
			break;
		case 4:
			if (lenght_of_the_track == 0)
			{
				cout << "Введите длину трассы, прежде чем определить её!" << endl;
				break;
			}
			system("cls");
			Determination_track(lenght_of_the_track, vehicles, amount_vehicles, power);
			determination_complete++;
			Wheel_mileage(vehicles, amount_vehicles, lenght_of_the_track);
			mil = mil + lenght_of_the_track;
			for (int k = 0; k < amount_vehicles; ++k)
			{
				for (int j = 0; j < vehicles[k].get_amount_wheels(); ++j)
				{
					if (vehicles[k].wheels[j].status == 0)
					{
						for (int i = 0; i < amount_vehicles; ++i) {
							vehicles[i].after_track(mil);
						}
					}
				}
			}
			for (int i = 0; i < amount_vehicles; ++i)
			{
				vehicles[i].Brokewheels = 0;
				for (int j = 0; j < vehicles[i].get_amount_wheels(); ++j)
				{
					if (vehicles[i].wheels[j].status == 1)
					{
						vehicles[i].Brokewheels++;
						vehicles[i].determination_speed();
					}
				}
				vehicles[i].calc_current_volume(vehicles[i].get_vol_tank(), lenght_of_the_track, vehicles[i].count_refueling(lenght_of_the_track, amount_vehicles, vehicles, i, power), vehicles[i].get_eng_consumption());
			}
			break;

		case 5:
			system("cls");
			cout << "Вы уверены, что выходите? 1 - да, 0 - нет\n";
			cin >> exit_menu;
			if (exit_menu == 1)
			{
				return;
			}
			break;
		default:
			cout << "Ошибка! Пробовать снова" << "\n";
		}
	}
}

int main() {
	setlocale(LC_ALL, "Russian");
	string Transportv_name = 0;
	double power = 0;
	int Amount_Vehicles;
	int Lenght_ofthe_Track = 0;
	cout << "Введите количесвто транспортных средств " << endl;
	cin >> Amount_Vehicles;
	while (cin.fail()) {
		ignoreLine();
		cout << "Вы ввели символ, пожалуйста, введите число" << endl;
		cin >> Amount_Vehicles;
	}
	do 
	{
		if (Amount_Vehicles <= 0)
		{
			cout << "Ошибка! Повторите попытку (количество транспортных средств > 0)" << endl;
			cin >> Amount_Vehicles;
		}
	} while (Amount_Vehicles <= 0);

	TransportVehicle* vehicles = new TransportVehicle[Amount_Vehicles];
	menu(Amount_Vehicles, vehicles, Lenght_ofthe_Track, Transportv_name, Amount_Vehicles, power);
	delete[] vehicles;
	return 0;
}
