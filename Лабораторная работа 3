#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <locale.h> 
#include <string>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <vector>
#include <ctime>

using namespace std;

bool Proverka(const string& input) {
	bool hasDecimal = false;
	for (int i = 0; i < input.length(); i++) {
		if (input[i] == '.') {
			if (hasDecimal) {
				return false; 
			}
			hasDecimal = true;
		}
		else if (!isdigit(input[i])) {
			return false; 
		}
	}
	return true;
}

int Get_Variant() {
	int number;
	string userInput;
	getline(cin, userInput);
	stringstream ss(userInput);
	while (true) {
		cout << "Введите число: " << endl;
		getline(cin, userInput);
		stringstream ss(userInput);
		if (ss >> number && number > 0) {
			break;
		}
		else {
			cout << "Ошибка! Пожалуйста, введите допустимое значение." << endl;
		}
	}
	return number;
}

class Wheel {
public:
	double mileage_wheel;
	bool status;
	Wheel() { status = 0; mileage_wheel = 0; };
	double get_mileage_wheel() {
		return mileage_wheel;
	}
	void check_status(double mileage_wheel) {
		if (status != 1) {
			double k = rand() % 50 + (mileage_wheel / 100);
			if (k > 45) {
				status = 1;
			}
		}
	}
};

class Engine {
protected:
	double engine_consumption;
	double power;
public:
	double calculating_consumption(double power)
	{
		return fabs(pow(power, 1 / 3) + sqrt(power) - 6.25);
	}
};

class Fuel_system {
protected:
	double Volume_tank;
	double Current_volume;
public:
	void calc_current_volume(double Volume_tank, double lenght_of_the_track, int num_ref, double engine_consumption)
	{
		Current_volume = Volume_tank + num_ref * Volume_tank - lenght_of_the_track / 100 * engine_consumption;
	}
};

class TransportVehicle : public Engine, public Fuel_system {
	string Vehicle_name;
	string Title;
	int amount_wheels;
	double mileage;
	double Speed;
	int num_refuelings;
	double time_of_the_race;
	int wheel;
	string Prov;
public:
	int Brokewheels = 0;
	Wheel* wheels;

	void set_name(string Title) { this->Title = Title; }
	string get_name() { return Title; }
	double get_speed() { return Speed; }
	double get_eng_consumption() { return engine_consumption; }
	void set_amount_wheels(int amount_wheels) { this->amount_wheels = amount_wheels; }
	int get_amount_wheels() { return amount_wheels; }
	double get_vol_tank() { return Volume_tank; }
	void Set_num_refuelings(int num_refuelings) { this->num_refuelings = num_refuelings; }
	int Get_num_refuelings() { return num_refuelings; }
	void Set_Time_race(double time_of_the_race) { this->time_of_the_race = time_of_the_race; }
	double Get_Time_race() { return time_of_the_race; }

	TransportVehicle() {};
	TransportVehicle(string Transport_name) {

		cout << "Машина " << endl;
		cout << "Введите название вашей машины: " << endl;
		cin >> Title;
		set_name(Title);
		cout << "Введите количество колёс: " << endl;
		cin >> Prov;
		while (true) {
			if (Proverka(Prov)) {
				istringstream(Prov) >> wheel;
				if (wheel > 0) {
					break;
				}
				else {
					cout << "Введите нормальное число." << endl;
					cin >> Prov;
				}
			}
			else {
				cout << "Введите нормальное число." << std::endl;
				cin >> Prov;
			}
		}
		set_amount_wheels(wheel);

		wheels = new Wheel[wheel];
		for (int i = 0; i < wheel; i++) {
			wheels[i] = Wheel();
		}

		cout << "Введите мощность: " << endl;
		cin >> Prov;
		while (true) {
			if (Proverka(Prov)) {
				istringstream(Prov) >> power;
				if (power > 0) {
					break;
				}
				else {
					cout << "Введите нормальное число." << endl;
					cin >> Prov;
				}
			}
			else {
				cout << "Введите нормальное число." << endl;
				cin >> Prov;
			}
		}

		mileage = 0;

		cout << "Введите объем резервуара: " << endl;
		cin >> Prov;
		while (true) {
			if (Proverka(Prov)) {
				istringstream(Prov) >> Volume_tank;
				if (Volume_tank > 0) {
					break;
				}
				else {
					cout << "Введите нормальное число." << endl;
					cin >> Prov;
				}
			}
			else {
				cout << "Введите нормальное число." << endl;
				cin >> Prov;
			}
		}
		cout << endl;
		Current_volume = Volume_tank;
		engine_consumption = calculating_consumption(power);
		determination_speed();
	}

	TransportVehicle& operator=(const TransportVehicle& other) {
		if (this == &other) {
			return *this;
		}
		Title = other.Title;
		wheel = other.wheel;
		power = other.power;
		Volume_tank = other.Volume_tank;
		Speed = other.Speed;
		num_refuelings = other.num_refuelings;
		time_of_the_race = other.time_of_the_race;
		amount_wheels = other.amount_wheels;
		Current_volume = other.Current_volume;
		engine_consumption = other.engine_consumption;
		mileage = other.mileage;
		Vehicle_name = other.Vehicle_name;
		Prov = other.Prov;
		Brokewheels = other.Brokewheels;
		wheels = new Wheel[wheel];
		for (int i = 0; i < wheel; i++) {
			wheels[i] = other.wheels[i];
		}
	}

	void determination_speed() {
		Speed = abs((sqrt(power) * ((70 / (amount_wheels)) - 2.5)) / pow(2, Brokewheels));
	}

	int count_refueling(double lenght_of_the_track, int amount_vehicles, TransportVehicle* vehicles, int i, double power) {
		int num_refuelings;
		num_refuelings = (int)(((lenght_of_the_track / 100) * vehicles[i].get_eng_consumption()) / vehicles[i].Volume_tank);
		return num_refuelings;
	}

	void after_track(double mileage) {
		for (int i = 0; i < amount_wheels; i++) {
			wheels[i].check_status(mileage);
		}
	}

	friend ostream& operator<<(ostream& os, const TransportVehicle& vehicle) {
		os << "Название: " << vehicle.Title << "\n";
		os << "Количество колёс: " << vehicle.amount_wheels << "\n";
		os << "Пробег: " << vehicle.wheels->get_mileage_wheel() << "\n";
		os << "Состояние колеса:\n";
		for (int i = 0; i < vehicle.amount_wheels; i++) {
			os << "Колесо " << i + 1 << ": ";
			if (vehicle.wheels[i].status == 1) {
				os << "Сломано\n";
			}
			else if (vehicle.wheels[i].status == 0) {
				os << "Хорошее состояние\n";
			}
			else {
			}
		}
		os << "Объем резервуара: " << vehicle.Volume_tank << "\n";
		os << "Текущий объем: " << vehicle.Current_volume << "\n";
		os << "Расход топлива двигателя: " << vehicle.engine_consumption << "\n";
		os << "Скорость: " << vehicle.Speed << "\n\n";
		return os;
	}

	friend double Determinate_time(double lenght_of_the_track, TransportVehicle* vehicles, int amount_vehicles, int i) {
		double time_of_the_race;
		time_of_the_race = lenght_of_the_track / vehicles[i].get_speed();
		vehicles[i].Set_Time_race(time_of_the_race);

		return vehicles[i].Get_Time_race();
	}

	friend double Determinate_refuelings(double lenght_of_the_track, TransportVehicle* vehicles, int amount_vehicles, int i) {
		int num_refuelings;
		double time_of_the_race;
		num_refuelings = (int)(((lenght_of_the_track / 100) * vehicles[i].get_eng_consumption()) / vehicles[i].Volume_tank);
		vehicles[i].Set_num_refuelings(num_refuelings);

		return vehicles[i].Get_num_refuelings();
	}

	~TransportVehicle() {
		delete[] wheels;
	}

};

void comparison(double* time_of_the_race, double* num_refuelings, string* arr_name, int size_arr) {
	for (int i = 0; i < size_arr - 1; i++) {
		for (int j = 0; j < size_arr - i - 1; j++) {
			if (time_of_the_race[j] > time_of_the_race[j + 1] || (time_of_the_race[j] == time_of_the_race[j + 1] && num_refuelings[j] > num_refuelings[j + 1])) {
				double temp = time_of_the_race[i];
				time_of_the_race[i] = time_of_the_race[i + 1];
				time_of_the_race[i + 1] = temp;
				int temp_refuelings = num_refuelings[i];
				num_refuelings[i] = num_refuelings[i + 1];
				num_refuelings[i + 1] = temp_refuelings;
				string temp_name;
				temp_name = arr_name[i];
				arr_name[i] = arr_name[i + 1];
				arr_name[i + 1] = temp_name;
			}
		}
	}
}

void Wheel_mileage(TransportVehicle* vehicles, int amount_vehicles, double length_of_the_track) {
	for (int i = 0; i < amount_vehicles; i++) {
		for (int j = 0; j < vehicles[i].get_amount_wheels(); j++) {
			vehicles[i].wheels[j].mileage_wheel += length_of_the_track;
		}
	}
}

void menu(int amount_vehicles, TransportVehicle* vehicles, double lenght_of_the_track, string vehicle_name, double power)

{
	int choice;
	int exit_menu = 0;
	int determination_complete = 0;
	int car = 0;
	double temp = 0;
	string Prov;

	double* time_of_the_race = new double[amount_vehicles];
	double* num_refuelings = new double[amount_vehicles];
	string* name_v = new string[amount_vehicles];

	while (exit_menu == 0)
	{
		cout << "Какое действие хотите совершить?" << endl;
		cout << "1. Внести данные о транспортном средстве" << endl;
		cout << "2. Посмотреть данные о транспортных средствах" << endl;
		cout << "3. Ввести протяженность трассы" << endl;
		cout << "4. Вывод результатов прохождения трассы" << endl; // должно появляться после расчетов
		cout << "5. Выход" << endl;
		cout << "> ";
		cin >> Prov;
		while (true) {
			if (Proverka(Prov)) {
				istringstream(Prov) >> choice;
				break;
			}
			else {
				cout << "Введите нормальное число." << std::endl;
				cin >> Prov;
			}
		}
		switch (choice)
		{
		case 1:
			system("cls");

			for (int i = 0; i < amount_vehicles; ++i)
			{
				vehicles[i] = TransportVehicle(vehicle_name);
			}
			car++;
			break;
		case 2:
			system("cls");
			if (car == 0)
			{
				cout << "Во-первых, введите транспортное средство!" << endl;
				break;
			}
			for (int i = 0; i < amount_vehicles; ++i)
			{
				cout << vehicles[i];
			}
			break;
		case 3:
			system("cls");
			if (car == 0)
			{
				cout << "Во-первых, введите транспортное средство!" << endl;
				break;
			}
			cout << "Введите длину трассы: " << endl;
			cin >> Prov;
			while (true) {
				if (Proverka(Prov)) {
					istringstream(Prov) >> lenght_of_the_track;
					if (lenght_of_the_track > 1e-100) {
						break;
					}
					else {
						cout << "Введите нормальное число." << endl;
						cin >> Prov;
					}
				}
				else {
					cout << "Введите нормальное число." << endl;
					cin >> Prov;
				}
			}
			break;
		case 4:

			if (lenght_of_the_track == 0)
			{
				cout << "Введите длину трассы, прежде чем определить её!" << endl;
				break;
			}
			system("cls");

			for (int i = 0; i < amount_vehicles; i++) {
				time_of_the_race[i] = Determinate_time(lenght_of_the_track, vehicles, amount_vehicles, i);
				num_refuelings[i] = Determinate_refuelings(lenght_of_the_track, vehicles, amount_vehicles, i);
				name_v[i] = vehicles[i].get_name();
			}

			comparison(time_of_the_race, num_refuelings, name_v, amount_vehicles);

			for (int i = 0; i < amount_vehicles; i++) {
				cout << "Время прохождения трассы автомобилем " << name_v[i] << endl;
				cout << "Часов: " << static_cast<int>(time_of_the_race[i]) << "\t";
				cout << "Минут: " << static_cast<int>((time_of_the_race[i] - (int)time_of_the_race[i]) * 60) << "\t";
				cout << "Секунд: " << static_cast<int>(time_of_the_race[i] * 3600 - (int)(time_of_the_race[i]) * 3600 - (int)((time_of_the_race[i] - (int)time_of_the_race[i]) * 60) * 60) << endl;
				cout << "Количество запарвок: " << num_refuelings[i] << endl << endl;
			}

			determination_complete++;
			Wheel_mileage(vehicles, amount_vehicles, lenght_of_the_track);
			temp = temp + lenght_of_the_track;
			for (int k = 0; k < amount_vehicles; ++k)
			{
				for (int j = 0; j < vehicles[k].get_amount_wheels(); ++j)
				{
					if (vehicles[k].wheels[j].status == 0)
					{
						for (int i = 0; i < amount_vehicles; ++i) {
							vehicles[i].after_track(temp);
						}
					}
				}
			}
			for (int i = 0; i < amount_vehicles; ++i)
			{
				vehicles[i].Brokewheels = 0;
				for (int j = 0; j < vehicles[i].get_amount_wheels(); ++j)
				{
					if (vehicles[i].wheels[j].status == 1)
					{
						vehicles[i].Brokewheels++;
						vehicles[i].determination_speed();
					}
				}
				vehicles[i].calc_current_volume(vehicles[i].get_vol_tank(), lenght_of_the_track, vehicles[i].count_refueling(lenght_of_the_track, amount_vehicles, vehicles, i, power), vehicles[i].get_eng_consumption());
			}
			break;

		case 5:
			system("cls");
			cout << "Вы уверены, что выходите? 1 - да, 0 - нет\n";
			cin >> Prov;
			while (true) {
				if (Proverka(Prov)) {
					istringstream(Prov) >> exit_menu;
					break;
				}
				else {
					cout << "Введите нормальное число." << endl;
					cin >> Prov;
				}
			}
			if (exit_menu == 1)
			{
				delete[] time_of_the_race;
				delete[] num_refuelings;
				delete[] name_v;
				return;
			}
			break;
		default:
			cout << "Ошибка! Пробовать снова" << "\n";
		}
	}
}

int main() {
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	string Transportv_name;
	double power = 0;
	int Amount_Vehicles;
	string Prov;
	int Lenght_ofthe_Track = 0;
	cout << "Введите количество транспортных средств " << endl;
	cin >> Prov;
	while (true) {
		if (Proverka(Prov)) {
			istringstream(Prov) >> Amount_Vehicles;
			break;
		}
		else {
			cout << "Введите нормальное число." << std::endl;
			cin >> Prov;
		}
	}
	do
	{
		if (Amount_Vehicles <= 0)
		{
			cout << "Ошибка! Повторите попытку (количество транспортных средств > 0)" << endl;
			cin >> Amount_Vehicles;
		}
	} while (Amount_Vehicles <= 0);

	TransportVehicle* vehicles = new TransportVehicle[Amount_Vehicles];
	menu(Amount_Vehicles, vehicles, Lenght_ofthe_Track, Transportv_name, power);
	delete[] vehicles;
	return 0;
}
