#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <locale.h> 
#include <string>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <vector>
#include <ctime>
#include <algorithm>
#include <limits>
#include <iterator>
#include <iomanip>
#define refueling_time 0.016
#define reWheel_time 0.004 
#define dt 0.0003

using namespace std;

enum class input_status {
    New_car = 1,
    Check_car = 2,
    Input_lap = 3,
    Determination = 4,
    Results = 5,
    Exit = 6
};

bool Proverka(const string& input) {
    bool hasDecimal = false;
    for (int i = 0; i < input.length(); i++) {
        if (input[i] == '.') {
            if (hasDecimal) {
                return false;
            }
            hasDecimal = true;
        }
        else if (!isdigit(input[i])) {
            return false;
        }
    }
    return true;
}

int input(string a) {
    string Prov;
    int output;
    cout << a;
    cin >> Prov;
    while (true) {
        if (Proverka(Prov)) {
            istringstream(Prov) >> output;
            if (output > 1e-100) {
                break;
            }
            else {
                cout << "Введите нормальное число." << endl;
                cin >> Prov;
            }
        }
        else {
            cout << "Введите нормальное число." << endl;
            cin >> Prov;
        }
    }
    return output;
}

class Wheel {
public:
    double mileage_wheel;
    bool status = 0;
    double get_status() { return status; }
    void set_status(int Status) { this->status = Status; }
    void d_wheel(double mileage, double speed);
    bool status_wheel(double mileage) {
        int s = 0;
        if (status == 0) {
            s = rand() % 2500;
        }
        if (s == 0) {
            status = 1;
        }
        else {
            status = 0;
        }
        return status;
    }
};

class Engine {
protected:
    double engine_consumption;
    double power;
public:
    Engine() { power = 0; engine_consumption = 0; };
    double calculating_consumption(double power){
        return fabs(pow((power), 0.5) / pow((double)1.5, (double)(power / 1000)));
    }
};

class Fuel_system {
protected:
    double Volume_tank;
    double Current_volume;
public:
    Fuel_system() { Volume_tank = 0; Current_volume = 0; };
    void calc_current_volume(double engine_consumption, double mileage)
    {
        Current_volume = Volume_tank - ((engine_consumption / 100) * mileage);
    }
};

class TransportVehicle : public Engine, public Fuel_system {
    int amount_wheels;
    double mileage;
    double Speed;
    int num_refuelings;
    double time_of_the_race;
    int current_laps;
    double current_mileage;
    double Start_speed;
    string Prov;
public:
    int Brokenwheels = 0;
    Wheel* wheels;
    string Title;

    int stat_of_car;
    vector<Wheel> v_wheels;
    double pits_time = 0;

    string get_carname() { return Title; }

    void determination_speed() {
        double s = 0.0;
        if ((amount_wheels - Brokenwheels) == 0) {
            s = 1.0 / amount_wheels;
        }
        Speed = (fabs(sqrt(power) * (70.0 / double(amount_wheels) - 2.5) / sqrt(Current_volume)) * (pow(0.75, double(Brokenwheels))));
    }

    void mileage_new() { this->mileage += Speed * dt; }
    void current_mileage_new() { this->current_mileage += (Speed * dt); }
    double get_mileage() { return mileage; }
    double get_current_mil() { return current_mileage; }

    double get_consumption() { return calculating_consumption(power); }
    
    double get_speed() { return Speed; }
    int get_broken_wheels() { return Brokenwheels; }

    int get_current_laps() { return current_laps; }
    void new_current_laps() { this->current_laps++; }
    void set_current_laps(int current_laps) { this->current_laps = current_laps; }

    double get_current_volume() { return Current_volume; }
    double get_amount_wheels() { return amount_wheels; }

    void Set_num_refuelings(int num_refuelings) { this->num_refuelings = num_refuelings; }
    int Get_num_refuelings() { return num_refuelings; }

    void Set_Time_race(double time_of_the_race) { this->time_of_the_race = time_of_the_race; }
    double Get_Time_race() { return time_of_the_race; }

    void output_time()
    {

        double t = this->time_of_the_race;
        double hours = (int)(t);
        double cur_time = (t - hours) * 60;
        double minutes = (int)(cur_time);
        double seconds = (int)((cur_time - minutes) * 60);
        if ((hours == 0) && (minutes == 0)) { cout << "Время: \t" << seconds << "\n"; }
        else if (hours == 0) { cout << "Время: \t" << minutes << ":" << seconds << "\n"; }
        else { cout << "Время: \t" << hours << ":" << minutes << ":" << seconds << "\n"; }
    }

    void calc_broken_wheels()
    {
        int c = 0;
        for (int i = 0; i < amount_wheels; i++)
        {
            if (v_wheels[i].get_status() == 1) {
                c++;
            }
        }
        Brokenwheels = c;
    }

    void total_time()
    {
        time_of_the_race += pits_time;
    }

    int lap_check(double lenght_lap) {
        if (current_mileage - lenght_lap >= 0) {
            current_laps = int(mileage / lenght_lap);
            current_mileage = 0;
            return 1;
        }
        else { 
            return 0; 
        }
    }

    void check_refuel(double lenght_lap)
    {
        if (Current_volume <= (engine_consumption * (lenght_lap / 100)))
        {
            num_refuelings++;
            pits_time += refueling_time;
            Current_volume = Volume_tank;
        }
    }

    void check_change_wheels() {
        if ((Brokenwheels != 0) && (Brokenwheels < amount_wheels)) {
            pits_time += reWheel_time * Brokenwheels;
            for (int i = 0; i < v_wheels.size(); ++i)
            {
                v_wheels[i].set_status(0);
            }
        }
    }
    
    void Wheel_mileage(TransportVehicle*& vehicles, int amount_vehicles, double length_of_the_track) {
        for (int i = 0; i < amount_vehicles; i++) {
            for (int j = 0; j < vehicles[i].amount_wheels; j++) {
                vehicles[i].wheels[j].mileage_wheel += length_of_the_track;
            }
        }
    }

    friend istream& operator >> (istream& stream, TransportVehicle& vehicle)
    {
        cout << "Введите название машины: ";
        stream >> vehicle.Title;

        vehicle.amount_wheels = input("Введите количество колёс: ");

        for (int i = 0; i < vehicle.amount_wheels; i++) {
            Wheel wheel1;
            vehicle.v_wheels.push_back(wheel1);
        }

        vehicle.Volume_tank = input("Введите объём резервуара: ");

        vehicle.power = input("Введите мощность: ");

        vehicle.current_mileage = 0;
        vehicle.current_laps = 0;
        vehicle.mileage = 0;
        vehicle.stat_of_car = 0;
        vehicle.Current_volume = vehicle.Volume_tank;
        vehicle.engine_consumption = vehicle.calculating_consumption(vehicle.power);
        vehicle.determination_speed();
        return stream;
    }

    friend ostream& operator << (ostream& stream, TransportVehicle& vehicle)
    {
        stream << "Название Машины: " << vehicle.Title << endl;
        stream << "Количество колёс: " << vehicle.amount_wheels << endl;
        stream << "Сломанные колёса: " << vehicle.Brokenwheels << endl;
        stream << "Скорость: " << vehicle.Speed << endl;
        stream << "Объём резервуара: " << vehicle.Volume_tank << endl;
        stream << "Текущий объём: " << vehicle.Current_volume << endl;
        stream << "Мощность двигателя: " << vehicle.power << endl;
        stream << "Расход топлива двигателя: " << vehicle.engine_consumption << endl;
        stream << "Пробег: " << vehicle.mileage << endl << endl;
        return stream;
    }
};

int End_race(vector<TransportVehicle>& vehicles, int amount_laps, double lenght_lap, int finished_cars)
{
    for (int i = 0; i < vehicles.size(); i++)
    {
        if (vehicles[i].get_current_mil() >= amount_laps * lenght_lap)
        {
            finished_cars++;
        }
    }
    if (finished_cars == vehicles.size())
    {
        return 1;
    }
    else return 0;
}

bool Sortirovka(TransportVehicle& a, TransportVehicle& b) {
    if (a.Get_Time_race() != b.Get_Time_race()) {
        return a.Get_Time_race() < b.Get_Time_race();
    }
    else {
        return a.Get_num_refuelings() < b.Get_num_refuelings();
    }
}

vector<TransportVehicle> RatingResults(vector<TransportVehicle> veh) {
    sort(veh.begin(), veh.end(), Sortirovka);
    return veh;
}

void Wheel::d_wheel(double mileage, double speed) {
    if (mileage == 0.) {
        mileage_wheel = 0.0;
        status = 0;
    }
    else {
        mileage_wheel = mileage;
        status = status_wheel(mileage);
    }
}

void OutputResults(vector<TransportVehicle> veh) {
    vector<TransportVehicle> results = RatingResults(veh);
    for (int i = 0; i < results.size(); i++) {
        cout << results[i].get_carname() << endl;
        results[i].output_time();
        cout << "Круги: " << results[i].get_current_laps() << endl;
        cout << "Количество заправок: " << int(results[i].Get_num_refuelings()) << endl << endl;
    }
}

void New_car(vector<TransportVehicle>& vehicles) {
    TransportVehicle newcar;
    cin >> newcar;
    vehicles.push_back(newcar);
    system("cls");
    cout << "Транспорт " << newcar.get_carname() << " был добавлен" << endl << endl;
}

void menu()
{
    vector<TransportVehicle> vehicles;

    int amount_laps = 0;
    input_status choice;
    int exit_menu = 0;
    double lenght_lap = 0;
    int carcheck = 0;
    string Prov;
    int finished_cars = 0;
    int a;

    while (exit_menu == 0)
    {
        cout << "Какое действие хотите совершить?" << endl;
        cout << "1. Внести данные о транспортном средстве" << endl;
        cout << "2. Посмотреть данные о транспортных средствах" << endl;
        cout << "3. Ввести протяженность трассы" << endl;
        cout << "4. Вычисление пути" << endl;
        cout << "5. Результаты" << endl;
        cout << "6. Выход" << endl;
        cout << "> ";
        a = input("");
        choice = static_cast<input_status>(a);

        switch (choice)
        {
        case input_status::New_car: {
            system("cls");
            New_car(vehicles);
            carcheck++;
            break;
        }
        case input_status::Check_car: {
            system("cls");
            if (carcheck == 0)
            {
                cout << "Во-первых, введите транспортное средство!" << endl;
                continue;
            }
            for (int i = 0; i < vehicles.size(); ++i)
            {
                cout << vehicles[i];
            }
            break;
        }
        case input_status::Input_lap: {
            system("cls");
            if (carcheck == 0)
            {
                cout << "Во-первых, введите транспортное средство!" << endl;
                continue;
            }

            amount_laps = input("Введите количество кругов: ");

            lenght_lap = input("Введите длину круга: ");
            break;
        }
        case input_status::Determination: {
            system("cls");
            if (carcheck == 0) {
                cout << "Сначала введите транспортные средства." << endl;
                continue;
            }

            if (amount_laps == 0)
            {
                cout << "Введите количество кругов, прежде чем определять!" << endl;
                continue;
            }
            double current_time = 0;
            int racing_cars = vehicles.size();
            while (!End_race(vehicles, amount_laps, lenght_lap, finished_cars))
            {
                while (racing_cars > 0) {
                    for (int i = 0; i < vehicles.size(); ++i)
                    {
                        int exit = 0;
                        if (vehicles[i].stat_of_car == 0)
                        {
                            vehicles[i].mileage_new();
                            vehicles[i].current_mileage_new();
                            for (int j = 0; j < vehicles[i].get_amount_wheels(); j++)
                            {
                                if (vehicles[i].v_wheels[j].get_status() == 0) {
                                    vehicles[i].v_wheels[j].d_wheel(vehicles[i].get_mileage(), vehicles[i].get_speed());
                                }
                            }
                            vehicles[i].calc_broken_wheels();
                            vehicles[i].calc_current_volume(vehicles[i].get_consumption(), vehicles[i].get_current_mil());
                            vehicles[i].determination_speed();
                            vehicles[i].Set_Time_race(current_time);
                            vehicles[i].output_time();
                            cout << "Машина: " << vehicles[i].Title
                                << " Круг: " << vehicles[i].get_current_laps() + 1
                                << " Скорость: " << vehicles[i].get_speed() << "\n"
                                << " Текущее топливо " << vehicles[i].get_current_volume()
                                << " Сломанные колёса: " << vehicles[i].get_broken_wheels() << "\n"
                                << " Пробег: " << vehicles[i].get_mileage() << "\n";
                            if (vehicles[i].lap_check(lenght_lap) == 1) {
                                vehicles[i].check_refuel(lenght_lap);
                                vehicles[i].check_change_wheels();
                            }
                            if ((vehicles[i].get_broken_wheels() == vehicles[i].get_amount_wheels()) || (vehicles[i].get_current_volume() <= 0)) {
                                exit = 1;
                                vehicles[i].Set_Time_race(current_time);
                                vehicles[i].new_current_laps();
                                cout << vehicles[i].get_carname() << " Закончил гонку " << endl << endl;
                            }
                            if ((lenght_lap * amount_laps) - (vehicles[i].get_mileage()) <= 0) {
                                exit = 1;
                                vehicles[i].Set_Time_race(current_time);
                                vehicles[i].set_current_laps(amount_laps);
                                vehicles[i].output_time();
                                cout << vehicles[i].get_carname() << " Закончил гонку " << endl << endl;
                            }
                            if (exit == 1) {
                                vehicles[i].stat_of_car = 1;
                                racing_cars -= 1;
                                if (racing_cars == 0) {
                                    break;
                                }
                                else {
                                    continue;
                                }
                            }
                        }
                        else {
                            continue;
                        }
                    }
                    current_time += dt;
                }
                if (racing_cars == 0) {
                    break;
                }
            }
            for (int i = 0; i < vehicles.size(); ++i)
            {
                vehicles[i].total_time();
            }
            break;
        }
        case input_status::Results: {
            system("cls");
            OutputResults(vehicles);
            break;
        }
        case input_status::Exit: {
            system("cls");
            exit_menu = input("Вы уверены, что выходите? 1 - да, 0 - нет: \n");
        }
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(0));
    menu();
    return 0;
}
